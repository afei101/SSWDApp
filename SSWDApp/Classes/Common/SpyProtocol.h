// **********************************************************************
// This file was generated by a TAF parser!
// TAF version 2.1.4.3 by WSRD Tencent.
// Generated from `SpyProtocol.jce'
// **********************************************************************

#ifndef __SPYPROTOCOL_H_
#define __SPYPROTOCOL_H_

#include <map>
#include <string>
#include <vector>
#include "Jce.h"
using namespace std;


namespace SpyGame
{
    enum CMD
    {
        Cmd_CSRegister = 1,
        Cmd_CSLogin = 2,
        Cmd_CSGetHallInfo = 3,
        Cmd_CSCreateRoom = 4,
        Cmd_CSEnterRoom = 5,
        Cmd_CSLeaveRoom = 6,
        Cmd_CSGetRoomInfo = 7,
        Cmd_CSPlayReady = 8,
        Cmd_CSRoundVoice = 9,
        Cmd_CSRoundVote = 10,
        Cmd_CSHello = 11,
        Cmd_CSLogout = 99,
        Cmd_SCUserStateChage = 100,
        Cmd_SCRoomStateChage = 101,
        Cmd_SCHallStateChage = 102,
        Cmd_SCRegisterRsp = 1001,
        Cmd_SCLoginRsp = 1002,
        Cmd_SCGetHallInfoRsp = 1003,
        Cmd_SCCreateRoomRsp = 1004,
        Cmd_SCEnterRoomRsp = 1005,
        Cmd_SCLeaveRoomRsp = 1006,
        Cmd_SCGetRoomInfoRsp = 1007,
        Cmd_SCPlayReadyRsp = 1008,
        Cmd_SCRoundVoiceRsp = 1009,
        Cmd_SCRoundVoteRsp = 10010,
        Cmd_SCLogoutRsp = 1099,
        Cmd_CSUserStateChageRsp = 1100,
        Cmd_CSRoomStateChageRsp = 1101,
        Cmd_CSHallStateChageRsp = 1102,
        Cmd_Unknown,
    };
    inline string etos(const CMD & e)
    {
        switch(e)
        {
            case Cmd_CSRegister: return "Cmd_CSRegister";
            case Cmd_CSLogin: return "Cmd_CSLogin";
            case Cmd_CSGetHallInfo: return "Cmd_CSGetHallInfo";
            case Cmd_CSCreateRoom: return "Cmd_CSCreateRoom";
            case Cmd_CSEnterRoom: return "Cmd_CSEnterRoom";
            case Cmd_CSLeaveRoom: return "Cmd_CSLeaveRoom";
            case Cmd_CSGetRoomInfo: return "Cmd_CSGetRoomInfo";
            case Cmd_CSPlayReady: return "Cmd_CSPlayReady";
            case Cmd_CSRoundVoice: return "Cmd_CSRoundVoice";
            case Cmd_CSRoundVote: return "Cmd_CSRoundVote";
            case Cmd_CSHello: return "Cmd_CSHello";
            case Cmd_CSLogout: return "Cmd_CSLogout";
            case Cmd_SCUserStateChage: return "Cmd_SCUserStateChage";
            case Cmd_SCRoomStateChage: return "Cmd_SCRoomStateChage";
            case Cmd_SCHallStateChage: return "Cmd_SCHallStateChage";
            case Cmd_SCRegisterRsp: return "Cmd_SCRegisterRsp";
            case Cmd_SCLoginRsp: return "Cmd_SCLoginRsp";
            case Cmd_SCGetHallInfoRsp: return "Cmd_SCGetHallInfoRsp";
            case Cmd_SCCreateRoomRsp: return "Cmd_SCCreateRoomRsp";
            case Cmd_SCEnterRoomRsp: return "Cmd_SCEnterRoomRsp";
            case Cmd_SCLeaveRoomRsp: return "Cmd_SCLeaveRoomRsp";
            case Cmd_SCGetRoomInfoRsp: return "Cmd_SCGetRoomInfoRsp";
            case Cmd_SCPlayReadyRsp: return "Cmd_SCPlayReadyRsp";
            case Cmd_SCRoundVoiceRsp: return "Cmd_SCRoundVoiceRsp";
            case Cmd_SCRoundVoteRsp: return "Cmd_SCRoundVoteRsp";
            case Cmd_SCLogoutRsp: return "Cmd_SCLogoutRsp";
            case Cmd_CSUserStateChageRsp: return "Cmd_CSUserStateChageRsp";
            case Cmd_CSRoomStateChageRsp: return "Cmd_CSRoomStateChageRsp";
            case Cmd_CSHallStateChageRsp: return "Cmd_CSHallStateChageRsp";
            case Cmd_Unknown: return "Cmd_Unknown";
            default: return "";
        }
    }
    inline int stoe(const string & s, CMD & e)
    {
        if(s == "Cmd_CSRegister")  { e=Cmd_CSRegister; return 0;}
        if(s == "Cmd_CSLogin")  { e=Cmd_CSLogin; return 0;}
        if(s == "Cmd_CSGetHallInfo")  { e=Cmd_CSGetHallInfo; return 0;}
        if(s == "Cmd_CSCreateRoom")  { e=Cmd_CSCreateRoom; return 0;}
        if(s == "Cmd_CSEnterRoom")  { e=Cmd_CSEnterRoom; return 0;}
        if(s == "Cmd_CSLeaveRoom")  { e=Cmd_CSLeaveRoom; return 0;}
        if(s == "Cmd_CSGetRoomInfo")  { e=Cmd_CSGetRoomInfo; return 0;}
        if(s == "Cmd_CSPlayReady")  { e=Cmd_CSPlayReady; return 0;}
        if(s == "Cmd_CSRoundVoice")  { e=Cmd_CSRoundVoice; return 0;}
        if(s == "Cmd_CSRoundVote")  { e=Cmd_CSRoundVote; return 0;}
        if(s == "Cmd_CSHello")  { e=Cmd_CSHello; return 0;}
        if(s == "Cmd_CSLogout")  { e=Cmd_CSLogout; return 0;}
        if(s == "Cmd_SCUserStateChage")  { e=Cmd_SCUserStateChage; return 0;}
        if(s == "Cmd_SCRoomStateChage")  { e=Cmd_SCRoomStateChage; return 0;}
        if(s == "Cmd_SCHallStateChage")  { e=Cmd_SCHallStateChage; return 0;}
        if(s == "Cmd_SCRegisterRsp")  { e=Cmd_SCRegisterRsp; return 0;}
        if(s == "Cmd_SCLoginRsp")  { e=Cmd_SCLoginRsp; return 0;}
        if(s == "Cmd_SCGetHallInfoRsp")  { e=Cmd_SCGetHallInfoRsp; return 0;}
        if(s == "Cmd_SCCreateRoomRsp")  { e=Cmd_SCCreateRoomRsp; return 0;}
        if(s == "Cmd_SCEnterRoomRsp")  { e=Cmd_SCEnterRoomRsp; return 0;}
        if(s == "Cmd_SCLeaveRoomRsp")  { e=Cmd_SCLeaveRoomRsp; return 0;}
        if(s == "Cmd_SCGetRoomInfoRsp")  { e=Cmd_SCGetRoomInfoRsp; return 0;}
        if(s == "Cmd_SCPlayReadyRsp")  { e=Cmd_SCPlayReadyRsp; return 0;}
        if(s == "Cmd_SCRoundVoiceRsp")  { e=Cmd_SCRoundVoiceRsp; return 0;}
        if(s == "Cmd_SCRoundVoteRsp")  { e=Cmd_SCRoundVoteRsp; return 0;}
        if(s == "Cmd_SCLogoutRsp")  { e=Cmd_SCLogoutRsp; return 0;}
        if(s == "Cmd_CSUserStateChageRsp")  { e=Cmd_CSUserStateChageRsp; return 0;}
        if(s == "Cmd_CSRoomStateChageRsp")  { e=Cmd_CSRoomStateChageRsp; return 0;}
        if(s == "Cmd_CSHallStateChageRsp")  { e=Cmd_CSHallStateChageRsp; return 0;}
        if(s == "Cmd_Unknown")  { e=Cmd_Unknown; return 0;}

        return -1;
    }

    enum ID_TYPE
    {
        ID_TYPE_SINAWEIBO = 1,
        ID_TYPE_QQWEIBO = 2,
        ID_TYPE_RENREN = 3,
        ID_TYPE_NA,
    };
    inline string etos(const ID_TYPE & e)
    {
        switch(e)
        {
            case ID_TYPE_SINAWEIBO: return "ID_TYPE_SINAWEIBO";
            case ID_TYPE_QQWEIBO: return "ID_TYPE_QQWEIBO";
            case ID_TYPE_RENREN: return "ID_TYPE_RENREN";
            case ID_TYPE_NA: return "ID_TYPE_NA";
            default: return "";
        }
    }
    inline int stoe(const string & s, ID_TYPE & e)
    {
        if(s == "ID_TYPE_SINAWEIBO")  { e=ID_TYPE_SINAWEIBO; return 0;}
        if(s == "ID_TYPE_QQWEIBO")  { e=ID_TYPE_QQWEIBO; return 0;}
        if(s == "ID_TYPE_RENREN")  { e=ID_TYPE_RENREN; return 0;}
        if(s == "ID_TYPE_NA")  { e=ID_TYPE_NA; return 0;}

        return -1;
    }

    enum ROOM_USE_STATE
    {
        ROOM_STATE_Play = 1,
        ROOM_STATE_Ready = 2,
        ROOM_STATE_Used = 3,
        ROOM_STATE_Empty = 4,
        ROOM_STATE_NA,
    };
    inline string etos(const ROOM_USE_STATE & e)
    {
        switch(e)
        {
            case ROOM_STATE_Play: return "ROOM_STATE_Play";
            case ROOM_STATE_Ready: return "ROOM_STATE_Ready";
            case ROOM_STATE_Used: return "ROOM_STATE_Used";
            case ROOM_STATE_Empty: return "ROOM_STATE_Empty";
            case ROOM_STATE_NA: return "ROOM_STATE_NA";
            default: return "";
        }
    }
    inline int stoe(const string & s, ROOM_USE_STATE & e)
    {
        if(s == "ROOM_STATE_Play")  { e=ROOM_STATE_Play; return 0;}
        if(s == "ROOM_STATE_Ready")  { e=ROOM_STATE_Ready; return 0;}
        if(s == "ROOM_STATE_Used")  { e=ROOM_STATE_Used; return 0;}
        if(s == "ROOM_STATE_Empty")  { e=ROOM_STATE_Empty; return 0;}
        if(s == "ROOM_STATE_NA")  { e=ROOM_STATE_NA; return 0;}

        return -1;
    }

    enum USER_GAME_STATE
    {
        USER_GAME_STATE_Wait = 1,
        USER_GAME_STATE_Ready = 2,
        USER_GAME_STATE_Play = 3,
        USER_GAME_STATE_Kickoffed = 4,
        USER_GAME_STATE_Out = 5,
        USER_GAME_STATE_NA,
    };
    inline string etos(const USER_GAME_STATE & e)
    {
        switch(e)
        {
            case USER_GAME_STATE_Wait: return "USER_GAME_STATE_Wait";
            case USER_GAME_STATE_Ready: return "USER_GAME_STATE_Ready";
            case USER_GAME_STATE_Play: return "USER_GAME_STATE_Play";
            case USER_GAME_STATE_Kickoffed: return "USER_GAME_STATE_Kickoffed";
            case USER_GAME_STATE_Out: return "USER_GAME_STATE_Out";
            case USER_GAME_STATE_NA: return "USER_GAME_STATE_NA";
            default: return "";
        }
    }
    inline int stoe(const string & s, USER_GAME_STATE & e)
    {
        if(s == "USER_GAME_STATE_Wait")  { e=USER_GAME_STATE_Wait; return 0;}
        if(s == "USER_GAME_STATE_Ready")  { e=USER_GAME_STATE_Ready; return 0;}
        if(s == "USER_GAME_STATE_Play")  { e=USER_GAME_STATE_Play; return 0;}
        if(s == "USER_GAME_STATE_Kickoffed")  { e=USER_GAME_STATE_Kickoffed; return 0;}
        if(s == "USER_GAME_STATE_Out")  { e=USER_GAME_STATE_Out; return 0;}
        if(s == "USER_GAME_STATE_NA")  { e=USER_GAME_STATE_NA; return 0;}

        return -1;
    }

    enum ROOM_GAME_STATE
    {
        ROOM_GAME_STATE_GameWait = 1,
        ROOM_GAME_STATE_GameReady = 2,
        ROOM_GAME_STATE_GameStart = 3,
        ROOM_GAME_STATE_RoundVoice = 4,
        ROOM_GAME_STATE_RoundVote = 5,
        ROOM_GAME_STATE_NA,
    };
    inline string etos(const ROOM_GAME_STATE & e)
    {
        switch(e)
        {
            case ROOM_GAME_STATE_GameWait: return "ROOM_GAME_STATE_GameWait";
            case ROOM_GAME_STATE_GameReady: return "ROOM_GAME_STATE_GameReady";
            case ROOM_GAME_STATE_GameStart: return "ROOM_GAME_STATE_GameStart";
            case ROOM_GAME_STATE_RoundVoice: return "ROOM_GAME_STATE_RoundVoice";
            case ROOM_GAME_STATE_RoundVote: return "ROOM_GAME_STATE_RoundVote";
            case ROOM_GAME_STATE_NA: return "ROOM_GAME_STATE_NA";
            default: return "";
        }
    }
    inline int stoe(const string & s, ROOM_GAME_STATE & e)
    {
        if(s == "ROOM_GAME_STATE_GameWait")  { e=ROOM_GAME_STATE_GameWait; return 0;}
        if(s == "ROOM_GAME_STATE_GameReady")  { e=ROOM_GAME_STATE_GameReady; return 0;}
        if(s == "ROOM_GAME_STATE_GameStart")  { e=ROOM_GAME_STATE_GameStart; return 0;}
        if(s == "ROOM_GAME_STATE_RoundVoice")  { e=ROOM_GAME_STATE_RoundVoice; return 0;}
        if(s == "ROOM_GAME_STATE_RoundVote")  { e=ROOM_GAME_STATE_RoundVote; return 0;}
        if(s == "ROOM_GAME_STATE_NA")  { e=ROOM_GAME_STATE_NA; return 0;}

        return -1;
    }

    struct Tag : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "SpyGame.Tag";
        }
        static string MD5()
        {
            return "f205d9430e1458c45dd1fad3288fddf7";
        }
        Tag()
        :strId("")
        {
        }
        void resetDefautlt()
        {
            strId = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(strId, 0);
            _os.write(value, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(strId, 0, true);
            _is.read(value, 1, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(strId,"strId");
            _ds.display(value,"value");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(strId, true);
            _ds.displaySimple(value, false);
            return _os;
        }
    public:
        std::string strId;
        vector<taf::Char> value;
    };
    inline bool operator==(const Tag&l, const Tag&r)
    {
        return l.strId == r.strId && l.value == r.value;
    }
    inline bool operator!=(const Tag&l, const Tag&r)
    {
        return !(l == r);
    }

    struct Package : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "SpyGame.Package";
        }
        static string MD5()
        {
            return "1e96dacac2dc28f6a0cb43747211566d";
        }
        Package()
        :uuid(0),iSeqNo(0),cEncodeType(0)
        {
        }
        void resetDefautlt()
        {
            uuid = 0;
            iSeqNo = 0;
            cEncodeType = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(uuid, 0);
            _os.write(iSeqNo, 1);
            _os.write((taf::Int32)eCmd, 2);
            _os.write(cEncodeType, 3);
            _os.write(head, 4);
            _os.write(body, 5);
            _os.write(vTag, 6);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(uuid, 0, true);
            _is.read(iSeqNo, 1, true);
            _is.read((taf::Int32&)eCmd, 2, true);
            _is.read(cEncodeType, 3, true);
            _is.read(head, 4, true);
            _is.read(body, 5, true);
            _is.read(vTag, 6, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(uuid,"uuid");
            _ds.display(iSeqNo,"iSeqNo");
            _ds.display((taf::Int32)eCmd,"eCmd");
            _ds.display(cEncodeType,"cEncodeType");
            _ds.display(head,"head");
            _ds.display(body,"body");
            _ds.display(vTag,"vTag");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(uuid, true);
            _ds.displaySimple(iSeqNo, true);
            _ds.displaySimple((taf::Int32)eCmd, true);
            _ds.displaySimple(cEncodeType, true);
            _ds.displaySimple(head, true);
            _ds.displaySimple(body, true);
            _ds.displaySimple(vTag, false);
            return _os;
        }
    public:
        taf::Int64 uuid;
        taf::Int32 iSeqNo;
        SpyGame::CMD eCmd;
        taf::Char cEncodeType;
        vector<taf::Char> head;
        vector<taf::Char> body;
        vector<SpyGame::Tag> vTag;
    };
    inline bool operator==(const Package&l, const Package&r)
    {
        return l.uuid == r.uuid && l.iSeqNo == r.iSeqNo && l.eCmd == r.eCmd && l.cEncodeType == r.cEncodeType && l.head == r.head && l.body == r.body && l.vTag == r.vTag;
    }
    inline bool operator!=(const Package&l, const Package&r)
    {
        return !(l == r);
    }

    struct UserBaseInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "SpyGame.UserBaseInfo";
        }
        static string MD5()
        {
            return "cd5d4d136378feb387d9b020da141a23";
        }
        UserBaseInfo()
        :uuid(0),eType(ID_TYPE_SINAWEIBO),strID(""),strCover(""),strNick("")
        {
        }
        void resetDefautlt()
        {
            uuid = 0;
            eType = ID_TYPE_SINAWEIBO;
            strID = "";
            strCover = "";
            strNick = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(uuid, 0);
            _os.write((taf::Int32)eType, 1);
            _os.write(strID, 2);
            _os.write(strCover, 3);
            _os.write(strNick, 4);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(uuid, 0, true);
            _is.read((taf::Int32&)eType, 1, true);
            _is.read(strID, 2, true);
            _is.read(strCover, 3, true);
            _is.read(strNick, 4, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(uuid,"uuid");
            _ds.display((taf::Int32)eType,"eType");
            _ds.display(strID,"strID");
            _ds.display(strCover,"strCover");
            _ds.display(strNick,"strNick");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(uuid, true);
            _ds.displaySimple((taf::Int32)eType, true);
            _ds.displaySimple(strID, true);
            _ds.displaySimple(strCover, true);
            _ds.displaySimple(strNick, false);
            return _os;
        }
    public:
        taf::Int64 uuid;
        SpyGame::ID_TYPE eType;
        std::string strID;
        std::string strCover;
        std::string strNick;
    };
    inline bool operator==(const UserBaseInfo&l, const UserBaseInfo&r)
    {
        return l.uuid == r.uuid && l.eType == r.eType && l.strID == r.strID && l.strCover == r.strCover && l.strNick == r.strNick;
    }
    inline bool operator!=(const UserBaseInfo&l, const UserBaseInfo&r)
    {
        return !(l == r);
    }

    struct UserInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "SpyGame.UserInfo";
        }
        static string MD5()
        {
            return "0c510f93265ba7bd98b7d6138cbad846";
        }
        UserInfo()
        :iTotalTimes(0),iWinTimes(0),iLostTimes(0),iLevel(0),cGender(0),strEmail(""),strDesc("")
        {
        }
        void resetDefautlt()
        {
            iTotalTimes = 0;
            iWinTimes = 0;
            iLostTimes = 0;
            iLevel = 0;
            cGender = 0;
            strEmail = "";
            strDesc = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(stBaseInfo, 0);
            _os.write(iTotalTimes, 1);
            _os.write(iWinTimes, 2);
            _os.write(iLostTimes, 3);
            _os.write(iLevel, 4);
            _os.write(cGender, 5);
            _os.write(strEmail, 6);
            _os.write(strDesc, 7);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(stBaseInfo, 0, true);
            _is.read(iTotalTimes, 1, true);
            _is.read(iWinTimes, 2, true);
            _is.read(iLostTimes, 3, true);
            _is.read(iLevel, 4, false);
            _is.read(cGender, 5, false);
            _is.read(strEmail, 6, false);
            _is.read(strDesc, 7, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(stBaseInfo,"stBaseInfo");
            _ds.display(iTotalTimes,"iTotalTimes");
            _ds.display(iWinTimes,"iWinTimes");
            _ds.display(iLostTimes,"iLostTimes");
            _ds.display(iLevel,"iLevel");
            _ds.display(cGender,"cGender");
            _ds.display(strEmail,"strEmail");
            _ds.display(strDesc,"strDesc");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(stBaseInfo, true);
            _ds.displaySimple(iTotalTimes, true);
            _ds.displaySimple(iWinTimes, true);
            _ds.displaySimple(iLostTimes, true);
            _ds.displaySimple(iLevel, true);
            _ds.displaySimple(cGender, true);
            _ds.displaySimple(strEmail, true);
            _ds.displaySimple(strDesc, false);
            return _os;
        }
    public:
        SpyGame::UserBaseInfo stBaseInfo;
        taf::UInt32 iTotalTimes;
        taf::UInt32 iWinTimes;
        taf::UInt32 iLostTimes;
        taf::UInt32 iLevel;
        taf::Char cGender;
        std::string strEmail;
        std::string strDesc;
    };
    inline bool operator==(const UserInfo&l, const UserInfo&r)
    {
        return l.stBaseInfo == r.stBaseInfo && l.iTotalTimes == r.iTotalTimes && l.iWinTimes == r.iWinTimes && l.iLostTimes == r.iLostTimes && l.iLevel == r.iLevel && l.cGender == r.cGender && l.strEmail == r.strEmail && l.strDesc == r.strDesc;
    }
    inline bool operator!=(const UserInfo&l, const UserInfo&r)
    {
        return !(l == r);
    }

    struct UserSvrInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "SpyGame.UserSvrInfo";
        }
        static string MD5()
        {
            return "85cde7e035cfafe2fa1b3f8a848b65ba";
        }
        UserSvrInfo()
        {
        }
        void resetDefautlt()
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(stUserInfo, 0);
            _os.write(vKey, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(stUserInfo, 0, true);
            _is.read(vKey, 1, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(stUserInfo,"stUserInfo");
            _ds.display(vKey,"vKey");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(stUserInfo, true);
            _ds.displaySimple(vKey, false);
            return _os;
        }
    public:
        SpyGame::UserInfo stUserInfo;
        vector<taf::Char> vKey;
    };
    inline bool operator==(const UserSvrInfo&l, const UserSvrInfo&r)
    {
        return l.stUserInfo == r.stUserInfo && l.vKey == r.vKey;
    }
    inline bool operator!=(const UserSvrInfo&l, const UserSvrInfo&r)
    {
        return !(l == r);
    }

    struct CmdResult : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "SpyGame.CmdResult";
        }
        static string MD5()
        {
            return "cc6b76ae0325922ef0136deb45921b3a";
        }
        CmdResult()
        :iCmdId(0),iErrCode(0),strErrDesc(""),iSubErrCode(0)
        {
        }
        void resetDefautlt()
        {
            iCmdId = 0;
            iErrCode = 0;
            strErrDesc = "";
            iSubErrCode = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(iCmdId, 0);
            _os.write(iErrCode, 1);
            _os.write(strErrDesc, 2);
            _os.write(iSubErrCode, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(iCmdId, 0, true);
            _is.read(iErrCode, 1, true);
            _is.read(strErrDesc, 2, true);
            _is.read(iSubErrCode, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(iCmdId,"iCmdId");
            _ds.display(iErrCode,"iErrCode");
            _ds.display(strErrDesc,"strErrDesc");
            _ds.display(iSubErrCode,"iSubErrCode");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(iCmdId, true);
            _ds.displaySimple(iErrCode, true);
            _ds.displaySimple(strErrDesc, true);
            _ds.displaySimple(iSubErrCode, false);
            return _os;
        }
    public:
        taf::Int32 iCmdId;
        taf::Int32 iErrCode;
        std::string strErrDesc;
        taf::Int32 iSubErrCode;
    };
    inline bool operator==(const CmdResult&l, const CmdResult&r)
    {
        return l.iCmdId == r.iCmdId && l.iErrCode == r.iErrCode && l.strErrDesc == r.strErrDesc && l.iSubErrCode == r.iSubErrCode;
    }
    inline bool operator!=(const CmdResult&l, const CmdResult&r)
    {
        return !(l == r);
    }

    struct Header : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "SpyGame.Header";
        }
        static string MD5()
        {
            return "24f569d3f242f794de5bd42a86c56dc2";
        }
        Header()
        :shVer(0),lCurrTime(0),uAccIp(0)
        {
        }
        void resetDefautlt()
        {
            shVer = 0;
            lCurrTime = 0;
            uAccIp = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(shVer, 0);
            _os.write(lCurrTime, 1);
            _os.write(stUserInfo, 2);
            _os.write(stResult, 3);
            _os.write(uAccIp, 4);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(shVer, 0, true);
            _is.read(lCurrTime, 1, true);
            _is.read(stUserInfo, 2, true);
            _is.read(stResult, 3, false);
            _is.read(uAccIp, 4, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(shVer,"shVer");
            _ds.display(lCurrTime,"lCurrTime");
            _ds.display(stUserInfo,"stUserInfo");
            _ds.display(stResult,"stResult");
            _ds.display(uAccIp,"uAccIp");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(shVer, true);
            _ds.displaySimple(lCurrTime, true);
            _ds.displaySimple(stUserInfo, true);
            _ds.displaySimple(stResult, true);
            _ds.displaySimple(uAccIp, false);
            return _os;
        }
    public:
        taf::Short shVer;
        taf::Int64 lCurrTime;
        SpyGame::UserBaseInfo stUserInfo;
        SpyGame::CmdResult stResult;
        taf::UInt32 uAccIp;
    };
    inline bool operator==(const Header&l, const Header&r)
    {
        return l.shVer == r.shVer && l.lCurrTime == r.lCurrTime && l.stUserInfo == r.stUserInfo && l.stResult == r.stResult && l.uAccIp == r.uAccIp;
    }
    inline bool operator!=(const Header&l, const Header&r)
    {
        return !(l == r);
    }

    struct RoomBaseInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "SpyGame.RoomBaseInfo";
        }
        static string MD5()
        {
            return "ae6e7bb7df980af7cccc3bbf7398a84d";
        }
        RoomBaseInfo()
        :lRoomId(0),strRoomName(""),nMaxMembers(0),nCurMembers(0),lCreateUser(0)
        {
        }
        void resetDefautlt()
        {
            lRoomId = 0;
            strRoomName = "";
            nMaxMembers = 0;
            nCurMembers = 0;
            lCreateUser = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(lRoomId, 0);
            _os.write(strRoomName, 1);
            _os.write((taf::Int32)eUseState, 2);
            _os.write(nMaxMembers, 3);
            _os.write(nCurMembers, 4);
            _os.write(lCreateUser, 5);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(lRoomId, 0, true);
            _is.read(strRoomName, 1, true);
            _is.read((taf::Int32&)eUseState, 2, true);
            _is.read(nMaxMembers, 3, true);
            _is.read(nCurMembers, 4, true);
            _is.read(lCreateUser, 5, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(lRoomId,"lRoomId");
            _ds.display(strRoomName,"strRoomName");
            _ds.display((taf::Int32)eUseState,"eUseState");
            _ds.display(nMaxMembers,"nMaxMembers");
            _ds.display(nCurMembers,"nCurMembers");
            _ds.display(lCreateUser,"lCreateUser");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(lRoomId, true);
            _ds.displaySimple(strRoomName, true);
            _ds.displaySimple((taf::Int32)eUseState, true);
            _ds.displaySimple(nMaxMembers, true);
            _ds.displaySimple(nCurMembers, true);
            _ds.displaySimple(lCreateUser, false);
            return _os;
        }
    public:
        taf::Int64 lRoomId;
        std::string strRoomName;
        SpyGame::ROOM_USE_STATE eUseState;
        taf::Int32 nMaxMembers;
        taf::Int32 nCurMembers;
        taf::Int64 lCreateUser;
    };
    inline bool operator==(const RoomBaseInfo&l, const RoomBaseInfo&r)
    {
        return l.lRoomId == r.lRoomId && l.strRoomName == r.strRoomName && l.eUseState == r.eUseState && l.nMaxMembers == r.nMaxMembers && l.nCurMembers == r.nCurMembers && l.lCreateUser == r.lCreateUser;
    }
    inline bool operator!=(const RoomBaseInfo&l, const RoomBaseInfo&r)
    {
        return !(l == r);
    }

    struct HallBaseInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "SpyGame.HallBaseInfo";
        }
        static string MD5()
        {
            return "7479093518da0ed038d6f6147004459c";
        }
        HallBaseInfo()
        :nRoomNum(0),nUserNum(0)
        {
        }
        void resetDefautlt()
        {
            nRoomNum = 0;
            nUserNum = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(nRoomNum, 0);
            _os.write(nUserNum, 1);
            _os.write(mapRoomInfo, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(nRoomNum, 0, true);
            _is.read(nUserNum, 1, false);
            _is.read(mapRoomInfo, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(nRoomNum,"nRoomNum");
            _ds.display(nUserNum,"nUserNum");
            _ds.display(mapRoomInfo,"mapRoomInfo");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(nRoomNum, true);
            _ds.displaySimple(nUserNum, true);
            _ds.displaySimple(mapRoomInfo, false);
            return _os;
        }
    public:
        taf::Int32 nRoomNum;
        taf::Int32 nUserNum;
        map<taf::Int64, SpyGame::RoomBaseInfo> mapRoomInfo;
    };
    inline bool operator==(const HallBaseInfo&l, const HallBaseInfo&r)
    {
        return l.nRoomNum == r.nRoomNum && l.nUserNum == r.nUserNum && l.mapRoomInfo == r.mapRoomInfo;
    }
    inline bool operator!=(const HallBaseInfo&l, const HallBaseInfo&r)
    {
        return !(l == r);
    }

    struct UserGameInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "SpyGame.UserGameInfo";
        }
        static string MD5()
        {
            return "2218965c2042b7b449ac6a9f6d16a970";
        }
        UserGameInfo()
        :lRoomId(0)
        {
        }
        void resetDefautlt()
        {
            lRoomId = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(stUserInfo, 0);
            _os.write((taf::Int32)eGameState, 1);
            _os.write(lRoomId, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(stUserInfo, 0, true);
            _is.read((taf::Int32&)eGameState, 1, true);
            _is.read(lRoomId, 2, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(stUserInfo,"stUserInfo");
            _ds.display((taf::Int32)eGameState,"eGameState");
            _ds.display(lRoomId,"lRoomId");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(stUserInfo, true);
            _ds.displaySimple((taf::Int32)eGameState, true);
            _ds.displaySimple(lRoomId, false);
            return _os;
        }
    public:
        SpyGame::UserBaseInfo stUserInfo;
        SpyGame::USER_GAME_STATE eGameState;
        taf::Int64 lRoomId;
    };
    inline bool operator==(const UserGameInfo&l, const UserGameInfo&r)
    {
        return l.stUserInfo == r.stUserInfo && l.eGameState == r.eGameState && l.lRoomId == r.lRoomId;
    }
    inline bool operator!=(const UserGameInfo&l, const UserGameInfo&r)
    {
        return !(l == r);
    }

    struct RoomDetailInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "SpyGame.RoomDetailInfo";
        }
        static string MD5()
        {
            return "c071befed68f016bc41813ffab5da689";
        }
        RoomDetailInfo()
        :iStateUserCnt(0)
        {
        }
        void resetDefautlt()
        {
            iStateUserCnt = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(stBaseInfo, 0);
            _os.write((taf::Int32)eGameState, 1);
            _os.write(iStateUserCnt, 2);
            _os.write(mapUserInfo, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(stBaseInfo, 0, true);
            _is.read((taf::Int32&)eGameState, 1, true);
            _is.read(iStateUserCnt, 2, true);
            _is.read(mapUserInfo, 3, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(stBaseInfo,"stBaseInfo");
            _ds.display((taf::Int32)eGameState,"eGameState");
            _ds.display(iStateUserCnt,"iStateUserCnt");
            _ds.display(mapUserInfo,"mapUserInfo");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(stBaseInfo, true);
            _ds.displaySimple((taf::Int32)eGameState, true);
            _ds.displaySimple(iStateUserCnt, true);
            _ds.displaySimple(mapUserInfo, false);
            return _os;
        }
    public:
        SpyGame::RoomBaseInfo stBaseInfo;
        SpyGame::ROOM_GAME_STATE eGameState;
        taf::Int32 iStateUserCnt;
        map<taf::Int64, SpyGame::UserGameInfo> mapUserInfo;
    };
    inline bool operator==(const RoomDetailInfo&l, const RoomDetailInfo&r)
    {
        return l.stBaseInfo == r.stBaseInfo && l.eGameState == r.eGameState && l.iStateUserCnt == r.iStateUserCnt && l.mapUserInfo == r.mapUserInfo;
    }
    inline bool operator!=(const RoomDetailInfo&l, const RoomDetailInfo&r)
    {
        return !(l == r);
    }

    struct CSRegister : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "SpyGame.CSRegister";
        }
        static string MD5()
        {
            return "c02b6a5e2ace8bbc2c7108829dfc4eb9";
        }
        CSRegister()
        {
        }
        void resetDefautlt()
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(stUserInfo, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(stUserInfo, 0, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(stUserInfo,"stUserInfo");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(stUserInfo, false);
            return _os;
        }
    public:
        SpyGame::UserInfo stUserInfo;
    };
    inline bool operator==(const CSRegister&l, const CSRegister&r)
    {
        return l.stUserInfo == r.stUserInfo;
    }
    inline bool operator!=(const CSRegister&l, const CSRegister&r)
    {
        return !(l == r);
    }

    struct SCRegisterRsp : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "SpyGame.SCRegisterRsp";
        }
        static string MD5()
        {
            return "d04377498f64e57fa794294bc728adab";
        }
        SCRegisterRsp()
        :iErrCode(0),IsNewUser(0)
        {
        }
        void resetDefautlt()
        {
            iErrCode = 0;
            IsNewUser = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(iErrCode, 0);
            _os.write(IsNewUser, 1);
            _os.write(stUserSvrInfo, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(iErrCode, 0, true);
            _is.read(IsNewUser, 1, false);
            _is.read(stUserSvrInfo, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(iErrCode,"iErrCode");
            _ds.display(IsNewUser,"IsNewUser");
            _ds.display(stUserSvrInfo,"stUserSvrInfo");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(iErrCode, true);
            _ds.displaySimple(IsNewUser, true);
            _ds.displaySimple(stUserSvrInfo, false);
            return _os;
        }
    public:
        taf::Int32 iErrCode;
        taf::Int32 IsNewUser;
        SpyGame::UserSvrInfo stUserSvrInfo;
    };
    inline bool operator==(const SCRegisterRsp&l, const SCRegisterRsp&r)
    {
        return l.iErrCode == r.iErrCode && l.IsNewUser == r.IsNewUser && l.stUserSvrInfo == r.stUserSvrInfo;
    }
    inline bool operator!=(const SCRegisterRsp&l, const SCRegisterRsp&r)
    {
        return !(l == r);
    }

    struct CSLogin : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "SpyGame.CSLogin";
        }
        static string MD5()
        {
            return "3c28d913d8b6de872104298ab7654818";
        }
        CSLogin()
        :uuid(0),strIosToken("")
        {
        }
        void resetDefautlt()
        {
            uuid = 0;
            strIosToken = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(uuid, 0);
            _os.write(strIosToken, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(uuid, 0, true);
            _is.read(strIosToken, 1, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(uuid,"uuid");
            _ds.display(strIosToken,"strIosToken");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(uuid, true);
            _ds.displaySimple(strIosToken, false);
            return _os;
        }
    public:
        taf::Int64 uuid;
        std::string strIosToken;
    };
    inline bool operator==(const CSLogin&l, const CSLogin&r)
    {
        return l.uuid == r.uuid && l.strIosToken == r.strIosToken;
    }
    inline bool operator!=(const CSLogin&l, const CSLogin&r)
    {
        return !(l == r);
    }

    struct SCLoginRsp : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "SpyGame.SCLoginRsp";
        }
        static string MD5()
        {
            return "05511bece4a2b65e1361cf6867461c97";
        }
        SCLoginRsp()
        :iErrCode(0)
        {
        }
        void resetDefautlt()
        {
            iErrCode = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(iErrCode, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(iErrCode, 0, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(iErrCode,"iErrCode");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(iErrCode, false);
            return _os;
        }
    public:
        taf::Int32 iErrCode;
    };
    inline bool operator==(const SCLoginRsp&l, const SCLoginRsp&r)
    {
        return l.iErrCode == r.iErrCode;
    }
    inline bool operator!=(const SCLoginRsp&l, const SCLoginRsp&r)
    {
        return !(l == r);
    }

    struct CSLogout : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "SpyGame.CSLogout";
        }
        static string MD5()
        {
            return "3c28d913d8b6de872104298ab7654818";
        }
        CSLogout()
        :uuid(0),strIosToken("")
        {
        }
        void resetDefautlt()
        {
            uuid = 0;
            strIosToken = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(uuid, 0);
            _os.write(strIosToken, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(uuid, 0, true);
            _is.read(strIosToken, 1, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(uuid,"uuid");
            _ds.display(strIosToken,"strIosToken");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(uuid, true);
            _ds.displaySimple(strIosToken, false);
            return _os;
        }
    public:
        taf::Int64 uuid;
        std::string strIosToken;
    };
    inline bool operator==(const CSLogout&l, const CSLogout&r)
    {
        return l.uuid == r.uuid && l.strIosToken == r.strIosToken;
    }
    inline bool operator!=(const CSLogout&l, const CSLogout&r)
    {
        return !(l == r);
    }

    struct SCLogoutRsp : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "SpyGame.SCLogoutRsp";
        }
        static string MD5()
        {
            return "05511bece4a2b65e1361cf6867461c97";
        }
        SCLogoutRsp()
        :iErrCode(0)
        {
        }
        void resetDefautlt()
        {
            iErrCode = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(iErrCode, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(iErrCode, 0, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(iErrCode,"iErrCode");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(iErrCode, false);
            return _os;
        }
    public:
        taf::Int32 iErrCode;
    };
    inline bool operator==(const SCLogoutRsp&l, const SCLogoutRsp&r)
    {
        return l.iErrCode == r.iErrCode;
    }
    inline bool operator!=(const SCLogoutRsp&l, const SCLogoutRsp&r)
    {
        return !(l == r);
    }

    struct CSGetHallInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "SpyGame.CSGetHallInfo";
        }
        static string MD5()
        {
            return "c5d29a3a3b5e33926ecd936ff3153e6b";
        }
        CSGetHallInfo()
        :uuid(0)
        {
        }
        void resetDefautlt()
        {
            uuid = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(uuid, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(uuid, 0, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(uuid,"uuid");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(uuid, false);
            return _os;
        }
    public:
        taf::Int64 uuid;
    };
    inline bool operator==(const CSGetHallInfo&l, const CSGetHallInfo&r)
    {
        return l.uuid == r.uuid;
    }
    inline bool operator!=(const CSGetHallInfo&l, const CSGetHallInfo&r)
    {
        return !(l == r);
    }

    struct SCGetHallInfoRsp : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "SpyGame.SCGetHallInfoRsp";
        }
        static string MD5()
        {
            return "e90de1f2e32d9bf7f3c25bf97fab7d94";
        }
        SCGetHallInfoRsp()
        :iErrCode(0)
        {
        }
        void resetDefautlt()
        {
            iErrCode = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(iErrCode, 0);
            _os.write(stHallInfo, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(iErrCode, 0, true);
            _is.read(stHallInfo, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(iErrCode,"iErrCode");
            _ds.display(stHallInfo,"stHallInfo");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(iErrCode, true);
            _ds.displaySimple(stHallInfo, false);
            return _os;
        }
    public:
        taf::Int32 iErrCode;
        SpyGame::HallBaseInfo stHallInfo;
    };
    inline bool operator==(const SCGetHallInfoRsp&l, const SCGetHallInfoRsp&r)
    {
        return l.iErrCode == r.iErrCode && l.stHallInfo == r.stHallInfo;
    }
    inline bool operator!=(const SCGetHallInfoRsp&l, const SCGetHallInfoRsp&r)
    {
        return !(l == r);
    }

    struct CSCreateRoom : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "SpyGame.CSCreateRoom";
        }
        static string MD5()
        {
            return "3c28d913d8b6de872104298ab7654818";
        }
        CSCreateRoom()
        :lCreateUser(0),strRoomName("")
        {
        }
        void resetDefautlt()
        {
            lCreateUser = 0;
            strRoomName = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(lCreateUser, 0);
            _os.write(strRoomName, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(lCreateUser, 0, true);
            _is.read(strRoomName, 1, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(lCreateUser,"lCreateUser");
            _ds.display(strRoomName,"strRoomName");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(lCreateUser, true);
            _ds.displaySimple(strRoomName, false);
            return _os;
        }
    public:
        taf::Int64 lCreateUser;
        std::string strRoomName;
    };
    inline bool operator==(const CSCreateRoom&l, const CSCreateRoom&r)
    {
        return l.lCreateUser == r.lCreateUser && l.strRoomName == r.strRoomName;
    }
    inline bool operator!=(const CSCreateRoom&l, const CSCreateRoom&r)
    {
        return !(l == r);
    }

    struct SCCreateRoomRsp : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "SpyGame.SCCreateRoomRsp";
        }
        static string MD5()
        {
            return "78b7183ebc396e988d23de9562b79da2";
        }
        SCCreateRoomRsp()
        :iErrCode(0)
        {
        }
        void resetDefautlt()
        {
            iErrCode = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(iErrCode, 0);
            _os.write(stRoomInfo, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(iErrCode, 0, true);
            _is.read(stRoomInfo, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(iErrCode,"iErrCode");
            _ds.display(stRoomInfo,"stRoomInfo");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(iErrCode, true);
            _ds.displaySimple(stRoomInfo, false);
            return _os;
        }
    public:
        taf::Int32 iErrCode;
        SpyGame::RoomDetailInfo stRoomInfo;
    };
    inline bool operator==(const SCCreateRoomRsp&l, const SCCreateRoomRsp&r)
    {
        return l.iErrCode == r.iErrCode && l.stRoomInfo == r.stRoomInfo;
    }
    inline bool operator!=(const SCCreateRoomRsp&l, const SCCreateRoomRsp&r)
    {
        return !(l == r);
    }

    struct CSEnterRoom : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "SpyGame.CSEnterRoom";
        }
        static string MD5()
        {
            return "a0f7f1c70b82271b1f084e61faf77494";
        }
        CSEnterRoom()
        :uuid(0),lRoomId(0)
        {
        }
        void resetDefautlt()
        {
            uuid = 0;
            lRoomId = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(uuid, 0);
            _os.write(lRoomId, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(uuid, 0, true);
            _is.read(lRoomId, 1, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(uuid,"uuid");
            _ds.display(lRoomId,"lRoomId");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(uuid, true);
            _ds.displaySimple(lRoomId, false);
            return _os;
        }
    public:
        taf::Int64 uuid;
        taf::Int64 lRoomId;
    };
    inline bool operator==(const CSEnterRoom&l, const CSEnterRoom&r)
    {
        return l.uuid == r.uuid && l.lRoomId == r.lRoomId;
    }
    inline bool operator!=(const CSEnterRoom&l, const CSEnterRoom&r)
    {
        return !(l == r);
    }

    struct SCEnterRoomRsp : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "SpyGame.SCEnterRoomRsp";
        }
        static string MD5()
        {
            return "78b7183ebc396e988d23de9562b79da2";
        }
        SCEnterRoomRsp()
        :iErrCode(0)
        {
        }
        void resetDefautlt()
        {
            iErrCode = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(iErrCode, 0);
            _os.write(stRoomInfo, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(iErrCode, 0, true);
            _is.read(stRoomInfo, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(iErrCode,"iErrCode");
            _ds.display(stRoomInfo,"stRoomInfo");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(iErrCode, true);
            _ds.displaySimple(stRoomInfo, false);
            return _os;
        }
    public:
        taf::Int32 iErrCode;
        SpyGame::RoomDetailInfo stRoomInfo;
    };
    inline bool operator==(const SCEnterRoomRsp&l, const SCEnterRoomRsp&r)
    {
        return l.iErrCode == r.iErrCode && l.stRoomInfo == r.stRoomInfo;
    }
    inline bool operator!=(const SCEnterRoomRsp&l, const SCEnterRoomRsp&r)
    {
        return !(l == r);
    }

    struct CSLeaveRoom : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "SpyGame.CSLeaveRoom";
        }
        static string MD5()
        {
            return "a0f7f1c70b82271b1f084e61faf77494";
        }
        CSLeaveRoom()
        :uuid(0),lRoomId(0)
        {
        }
        void resetDefautlt()
        {
            uuid = 0;
            lRoomId = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(uuid, 0);
            _os.write(lRoomId, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(uuid, 0, true);
            _is.read(lRoomId, 1, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(uuid,"uuid");
            _ds.display(lRoomId,"lRoomId");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(uuid, true);
            _ds.displaySimple(lRoomId, false);
            return _os;
        }
    public:
        taf::Int64 uuid;
        taf::Int64 lRoomId;
    };
    inline bool operator==(const CSLeaveRoom&l, const CSLeaveRoom&r)
    {
        return l.uuid == r.uuid && l.lRoomId == r.lRoomId;
    }
    inline bool operator!=(const CSLeaveRoom&l, const CSLeaveRoom&r)
    {
        return !(l == r);
    }

    struct SCLeaveRoomRsp : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "SpyGame.SCLeaveRoomRsp";
        }
        static string MD5()
        {
            return "05511bece4a2b65e1361cf6867461c97";
        }
        SCLeaveRoomRsp()
        :iErrCode(0)
        {
        }
        void resetDefautlt()
        {
            iErrCode = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(iErrCode, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(iErrCode, 0, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(iErrCode,"iErrCode");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(iErrCode, false);
            return _os;
        }
    public:
        taf::Int32 iErrCode;
    };
    inline bool operator==(const SCLeaveRoomRsp&l, const SCLeaveRoomRsp&r)
    {
        return l.iErrCode == r.iErrCode;
    }
    inline bool operator!=(const SCLeaveRoomRsp&l, const SCLeaveRoomRsp&r)
    {
        return !(l == r);
    }

    struct CSGetRoomInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "SpyGame.CSGetRoomInfo";
        }
        static string MD5()
        {
            return "c5d29a3a3b5e33926ecd936ff3153e6b";
        }
        CSGetRoomInfo()
        :lRoomId(0)
        {
        }
        void resetDefautlt()
        {
            lRoomId = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(lRoomId, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(lRoomId, 0, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(lRoomId,"lRoomId");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(lRoomId, false);
            return _os;
        }
    public:
        taf::Int64 lRoomId;
    };
    inline bool operator==(const CSGetRoomInfo&l, const CSGetRoomInfo&r)
    {
        return l.lRoomId == r.lRoomId;
    }
    inline bool operator!=(const CSGetRoomInfo&l, const CSGetRoomInfo&r)
    {
        return !(l == r);
    }

    struct SCGetRoomInfoRsp : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "SpyGame.SCGetRoomInfoRsp";
        }
        static string MD5()
        {
            return "78b7183ebc396e988d23de9562b79da2";
        }
        SCGetRoomInfoRsp()
        :iErrCode(0)
        {
        }
        void resetDefautlt()
        {
            iErrCode = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(iErrCode, 0);
            _os.write(stRoomInfo, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(iErrCode, 0, true);
            _is.read(stRoomInfo, 1, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(iErrCode,"iErrCode");
            _ds.display(stRoomInfo,"stRoomInfo");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(iErrCode, true);
            _ds.displaySimple(stRoomInfo, false);
            return _os;
        }
    public:
        taf::Int32 iErrCode;
        SpyGame::RoomDetailInfo stRoomInfo;
    };
    inline bool operator==(const SCGetRoomInfoRsp&l, const SCGetRoomInfoRsp&r)
    {
        return l.iErrCode == r.iErrCode && l.stRoomInfo == r.stRoomInfo;
    }
    inline bool operator!=(const SCGetRoomInfoRsp&l, const SCGetRoomInfoRsp&r)
    {
        return !(l == r);
    }

    struct CSUserPlayReady : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "SpyGame.CSUserPlayReady";
        }
        static string MD5()
        {
            return "a09243f75e574da2563d21f8ef252bbc";
        }
        CSUserPlayReady()
        :lRoomId(0)
        {
        }
        void resetDefautlt()
        {
            lRoomId = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(lRoomId, 0);
            _os.write(stUserInfo, 1);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(lRoomId, 0, true);
            _is.read(stUserInfo, 1, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(lRoomId,"lRoomId");
            _ds.display(stUserInfo,"stUserInfo");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(lRoomId, true);
            _ds.displaySimple(stUserInfo, false);
            return _os;
        }
    public:
        taf::Int64 lRoomId;
        SpyGame::UserGameInfo stUserInfo;
    };
    inline bool operator==(const CSUserPlayReady&l, const CSUserPlayReady&r)
    {
        return l.lRoomId == r.lRoomId && l.stUserInfo == r.stUserInfo;
    }
    inline bool operator!=(const CSUserPlayReady&l, const CSUserPlayReady&r)
    {
        return !(l == r);
    }

    struct SCUserPlayReadyRsp : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "SpyGame.SCUserPlayReadyRsp";
        }
        static string MD5()
        {
            return "05511bece4a2b65e1361cf6867461c97";
        }
        SCUserPlayReadyRsp()
        :iErrCode(0)
        {
        }
        void resetDefautlt()
        {
            iErrCode = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(iErrCode, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(iErrCode, 0, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(iErrCode,"iErrCode");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(iErrCode, false);
            return _os;
        }
    public:
        taf::Int32 iErrCode;
    };
    inline bool operator==(const SCUserPlayReadyRsp&l, const SCUserPlayReadyRsp&r)
    {
        return l.iErrCode == r.iErrCode;
    }
    inline bool operator!=(const SCUserPlayReadyRsp&l, const SCUserPlayReadyRsp&r)
    {
        return !(l == r);
    }

    struct CSRoundVoice : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "SpyGame.CSRoundVoice";
        }
        static string MD5()
        {
            return "6b72f42c7065d5ba2808157b51dadc71";
        }
        CSRoundVoice()
        :uuid(0),lRoomId(0)
        {
        }
        void resetDefautlt()
        {
            uuid = 0;
            lRoomId = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(uuid, 0);
            _os.write(lRoomId, 1);
            _os.write(vVoiceData, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(uuid, 0, true);
            _is.read(lRoomId, 1, true);
            _is.read(vVoiceData, 2, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(uuid,"uuid");
            _ds.display(lRoomId,"lRoomId");
            _ds.display(vVoiceData,"vVoiceData");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(uuid, true);
            _ds.displaySimple(lRoomId, true);
            _ds.displaySimple(vVoiceData, false);
            return _os;
        }
    public:
        taf::Int64 uuid;
        taf::Int64 lRoomId;
        vector<taf::Char> vVoiceData;
    };
    inline bool operator==(const CSRoundVoice&l, const CSRoundVoice&r)
    {
        return l.uuid == r.uuid && l.lRoomId == r.lRoomId && l.vVoiceData == r.vVoiceData;
    }
    inline bool operator!=(const CSRoundVoice&l, const CSRoundVoice&r)
    {
        return !(l == r);
    }

    struct SCRoundVoiceRsp : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "SpyGame.SCRoundVoiceRsp";
        }
        static string MD5()
        {
            return "05511bece4a2b65e1361cf6867461c97";
        }
        SCRoundVoiceRsp()
        :iErrCode(0)
        {
        }
        void resetDefautlt()
        {
            iErrCode = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(iErrCode, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(iErrCode, 0, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(iErrCode,"iErrCode");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(iErrCode, false);
            return _os;
        }
    public:
        taf::Int32 iErrCode;
    };
    inline bool operator==(const SCRoundVoiceRsp&l, const SCRoundVoiceRsp&r)
    {
        return l.iErrCode == r.iErrCode;
    }
    inline bool operator!=(const SCRoundVoiceRsp&l, const SCRoundVoiceRsp&r)
    {
        return !(l == r);
    }

    struct CSRoundVote : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "SpyGame.CSRoundVote";
        }
        static string MD5()
        {
            return "59ec633a0479e0c47e29ee571b0dc24d";
        }
        CSRoundVote()
        :uuid(0),lRoomId(0),lVotedUser(0)
        {
        }
        void resetDefautlt()
        {
            uuid = 0;
            lRoomId = 0;
            lVotedUser = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(uuid, 0);
            _os.write(lRoomId, 1);
            _os.write(lVotedUser, 2);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(uuid, 0, true);
            _is.read(lRoomId, 1, true);
            _is.read(lVotedUser, 2, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(uuid,"uuid");
            _ds.display(lRoomId,"lRoomId");
            _ds.display(lVotedUser,"lVotedUser");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(uuid, true);
            _ds.displaySimple(lRoomId, true);
            _ds.displaySimple(lVotedUser, false);
            return _os;
        }
    public:
        taf::Int64 uuid;
        taf::Int64 lRoomId;
        taf::Int64 lVotedUser;
    };
    inline bool operator==(const CSRoundVote&l, const CSRoundVote&r)
    {
        return l.uuid == r.uuid && l.lRoomId == r.lRoomId && l.lVotedUser == r.lVotedUser;
    }
    inline bool operator!=(const CSRoundVote&l, const CSRoundVote&r)
    {
        return !(l == r);
    }

    struct SCRoundVoteRsp : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "SpyGame.SCRoundVoteRsp";
        }
        static string MD5()
        {
            return "05511bece4a2b65e1361cf6867461c97";
        }
        SCRoundVoteRsp()
        :iErrCode(0)
        {
        }
        void resetDefautlt()
        {
            iErrCode = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(iErrCode, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(iErrCode, 0, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(iErrCode,"iErrCode");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(iErrCode, false);
            return _os;
        }
    public:
        taf::Int32 iErrCode;
    };
    inline bool operator==(const SCRoundVoteRsp&l, const SCRoundVoteRsp&r)
    {
        return l.iErrCode == r.iErrCode;
    }
    inline bool operator!=(const SCRoundVoteRsp&l, const SCRoundVoteRsp&r)
    {
        return !(l == r);
    }

    struct SCUserStateChange : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "SpyGame.SCUserStateChange";
        }
        static string MD5()
        {
            return "28701043974461e8ad7a22b1c932cb48";
        }
        SCUserStateChange()
        {
        }
        void resetDefautlt()
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(stUserInfo, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(stUserInfo, 0, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(stUserInfo,"stUserInfo");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(stUserInfo, false);
            return _os;
        }
    public:
        SpyGame::UserGameInfo stUserInfo;
    };
    inline bool operator==(const SCUserStateChange&l, const SCUserStateChange&r)
    {
        return l.stUserInfo == r.stUserInfo;
    }
    inline bool operator!=(const SCUserStateChange&l, const SCUserStateChange&r)
    {
        return !(l == r);
    }

    struct RoundWordInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "SpyGame.RoundWordInfo";
        }
        static string MD5()
        {
            return "f3673d058f6bd5fc020d714f8bed1d3b";
        }
        RoundWordInfo()
        :nRoundNum(0),lCurrentUser(0),strGameWords(""),lFirstUser(0)
        {
        }
        void resetDefautlt()
        {
            nRoundNum = 0;
            lCurrentUser = 0;
            strGameWords = "";
            lFirstUser = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(nRoundNum, 0);
            _os.write(lCurrentUser, 1);
            _os.write(strGameWords, 2);
            _os.write(lFirstUser, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(nRoundNum, 0, true);
            _is.read(lCurrentUser, 1, true);
            _is.read(strGameWords, 2, true);
            _is.read(lFirstUser, 3, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(nRoundNum,"nRoundNum");
            _ds.display(lCurrentUser,"lCurrentUser");
            _ds.display(strGameWords,"strGameWords");
            _ds.display(lFirstUser,"lFirstUser");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(nRoundNum, true);
            _ds.displaySimple(lCurrentUser, true);
            _ds.displaySimple(strGameWords, true);
            _ds.displaySimple(lFirstUser, false);
            return _os;
        }
    public:
        taf::Int32 nRoundNum;
        taf::Int64 lCurrentUser;
        std::string strGameWords;
        taf::Int64 lFirstUser;
    };
    inline bool operator==(const RoundWordInfo&l, const RoundWordInfo&r)
    {
        return l.nRoundNum == r.nRoundNum && l.lCurrentUser == r.lCurrentUser && l.strGameWords == r.strGameWords && l.lFirstUser == r.lFirstUser;
    }
    inline bool operator!=(const RoundWordInfo&l, const RoundWordInfo&r)
    {
        return !(l == r);
    }

    struct RoundVoiceInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "SpyGame.RoundVoiceInfo";
        }
        static string MD5()
        {
            return "c1ce3e3e6fe8e3e08bd44074263a7b0d";
        }
        RoundVoiceInfo()
        :nRoundNum(0),lCurrentUser(0),lPreviousUser(0)
        {
        }
        void resetDefautlt()
        {
            nRoundNum = 0;
            lCurrentUser = 0;
            lPreviousUser = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(nRoundNum, 0);
            _os.write(lCurrentUser, 1);
            _os.write(lPreviousUser, 2);
            _os.write(vPreviousUserVoice, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(nRoundNum, 0, true);
            _is.read(lCurrentUser, 1, true);
            _is.read(lPreviousUser, 2, false);
            _is.read(vPreviousUserVoice, 3, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(nRoundNum,"nRoundNum");
            _ds.display(lCurrentUser,"lCurrentUser");
            _ds.display(lPreviousUser,"lPreviousUser");
            _ds.display(vPreviousUserVoice,"vPreviousUserVoice");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(nRoundNum, true);
            _ds.displaySimple(lCurrentUser, true);
            _ds.displaySimple(lPreviousUser, true);
            _ds.displaySimple(vPreviousUserVoice, false);
            return _os;
        }
    public:
        taf::Int32 nRoundNum;
        taf::Int64 lCurrentUser;
        taf::Int64 lPreviousUser;
        vector<taf::Char> vPreviousUserVoice;
    };
    inline bool operator==(const RoundVoiceInfo&l, const RoundVoiceInfo&r)
    {
        return l.nRoundNum == r.nRoundNum && l.lCurrentUser == r.lCurrentUser && l.lPreviousUser == r.lPreviousUser && l.vPreviousUserVoice == r.vPreviousUserVoice;
    }
    inline bool operator!=(const RoundVoiceInfo&l, const RoundVoiceInfo&r)
    {
        return !(l == r);
    }

    struct GameResultInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "SpyGame.GameResultInfo";
        }
        static string MD5()
        {
            return "3dd21e5f3546a1d075dd924e57a85a17";
        }
        GameResultInfo()
        :iResult(0),iSpyUser(0),strSpyWords(""),strOtherWords("")
        {
        }
        void resetDefautlt()
        {
            iResult = 0;
            iSpyUser = 0;
            strSpyWords = "";
            strOtherWords = "";
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(iResult, 0);
            _os.write(iSpyUser, 1);
            _os.write(strSpyWords, 2);
            _os.write(strOtherWords, 3);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(iResult, 0, true);
            _is.read(iSpyUser, 1, true);
            _is.read(strSpyWords, 2, true);
            _is.read(strOtherWords, 3, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(iResult,"iResult");
            _ds.display(iSpyUser,"iSpyUser");
            _ds.display(strSpyWords,"strSpyWords");
            _ds.display(strOtherWords,"strOtherWords");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(iResult, true);
            _ds.displaySimple(iSpyUser, true);
            _ds.displaySimple(strSpyWords, true);
            _ds.displaySimple(strOtherWords, false);
            return _os;
        }
    public:
        taf::Int32 iResult;
        taf::Int32 iSpyUser;
        std::string strSpyWords;
        std::string strOtherWords;
    };
    inline bool operator==(const GameResultInfo&l, const GameResultInfo&r)
    {
        return l.iResult == r.iResult && l.iSpyUser == r.iSpyUser && l.strSpyWords == r.strSpyWords && l.strOtherWords == r.strOtherWords;
    }
    inline bool operator!=(const GameResultInfo&l, const GameResultInfo&r)
    {
        return !(l == r);
    }

    struct RoundVoteInfo : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "SpyGame.RoundVoteInfo";
        }
        static string MD5()
        {
            return "7192c3ab10430d2dd18b01353b424043";
        }
        RoundVoteInfo()
        :iRestart(0),iVoteUser(0),lFirstUser(0)
        {
        }
        void resetDefautlt()
        {
            iRestart = 0;
            iVoteUser = 0;
            lFirstUser = 0;
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(iRestart, 0);
            _os.write(iVoteUser, 1);
            _os.write(mVoteResult, 2);
            _os.write(mVoteInfo, 3);
            _os.write(stGameResult, 4);
            _os.write(lFirstUser, 5);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(iRestart, 0, true);
            _is.read(iVoteUser, 1, true);
            _is.read(mVoteResult, 2, true);
            _is.read(mVoteInfo, 3, true);
            _is.read(stGameResult, 4, false);
            _is.read(lFirstUser, 5, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(iRestart,"iRestart");
            _ds.display(iVoteUser,"iVoteUser");
            _ds.display(mVoteResult,"mVoteResult");
            _ds.display(mVoteInfo,"mVoteInfo");
            _ds.display(stGameResult,"stGameResult");
            _ds.display(lFirstUser,"lFirstUser");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(iRestart, true);
            _ds.displaySimple(iVoteUser, true);
            _ds.displaySimple(mVoteResult, true);
            _ds.displaySimple(mVoteInfo, true);
            _ds.displaySimple(stGameResult, true);
            _ds.displaySimple(lFirstUser, false);
            return _os;
        }
    public:
        taf::Int32 iRestart;
        taf::Int32 iVoteUser;
        map<taf::Int64, taf::Int32> mVoteResult;
        map<taf::Int64, taf::Int64> mVoteInfo;
        SpyGame::GameResultInfo stGameResult;
        taf::Int64 lFirstUser;
    };
    inline bool operator==(const RoundVoteInfo&l, const RoundVoteInfo&r)
    {
        return l.iRestart == r.iRestart && l.iVoteUser == r.iVoteUser && l.mVoteResult == r.mVoteResult && l.mVoteInfo == r.mVoteInfo && l.stGameResult == r.stGameResult && l.lFirstUser == r.lFirstUser;
    }
    inline bool operator!=(const RoundVoteInfo&l, const RoundVoteInfo&r)
    {
        return !(l == r);
    }

    struct SCRoomStateChange : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "SpyGame.SCRoomStateChange";
        }
        static string MD5()
        {
            return "e7c9294f4138613461ef4b2161b24d3f";
        }
        SCRoomStateChange()
        {
        }
        void resetDefautlt()
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(stBaseInfo, 0);
            _os.write((taf::Int32)eGameState, 1);
            _os.write(stWordInfo, 2);
            _os.write(stVoiceInfo, 3);
            _os.write(stVoteInfo, 4);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(stBaseInfo, 0, true);
            _is.read((taf::Int32&)eGameState, 1, true);
            _is.read(stWordInfo, 2, false);
            _is.read(stVoiceInfo, 3, false);
            _is.read(stVoteInfo, 4, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(stBaseInfo,"stBaseInfo");
            _ds.display((taf::Int32)eGameState,"eGameState");
            _ds.display(stWordInfo,"stWordInfo");
            _ds.display(stVoiceInfo,"stVoiceInfo");
            _ds.display(stVoteInfo,"stVoteInfo");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(stBaseInfo, true);
            _ds.displaySimple((taf::Int32)eGameState, true);
            _ds.displaySimple(stWordInfo, true);
            _ds.displaySimple(stVoiceInfo, true);
            _ds.displaySimple(stVoteInfo, false);
            return _os;
        }
    public:
        SpyGame::RoomBaseInfo stBaseInfo;
        SpyGame::ROOM_GAME_STATE eGameState;
        SpyGame::RoundWordInfo stWordInfo;
        SpyGame::RoundVoiceInfo stVoiceInfo;
        SpyGame::RoundVoteInfo stVoteInfo;
    };
    inline bool operator==(const SCRoomStateChange&l, const SCRoomStateChange&r)
    {
        return l.stBaseInfo == r.stBaseInfo && l.eGameState == r.eGameState && l.stWordInfo == r.stWordInfo && l.stVoiceInfo == r.stVoiceInfo && l.stVoteInfo == r.stVoteInfo;
    }
    inline bool operator!=(const SCRoomStateChange&l, const SCRoomStateChange&r)
    {
        return !(l == r);
    }

    struct SCHallStateChange : public taf::JceStructBase
    {
    public:
        static string className()
        {
            return "SpyGame.SCHallStateChange";
        }
        static string MD5()
        {
            return "773eb565e4f7c8e98f168bbf157cb84e";
        }
        SCHallStateChange()
        {
        }
        void resetDefautlt()
        {
        }
        template<typename WriterT>
        void writeTo(taf::JceOutputStream<WriterT>& _os) const
        {
            _os.write(stHallInfo, 0);
        }
        template<typename ReaderT>
        void readFrom(taf::JceInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(stHallInfo, 0, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.display(stHallInfo,"stHallInfo");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            taf::JceDisplayer _ds(_os, _level);
            _ds.displaySimple(stHallInfo, false);
            return _os;
        }
    public:
        SpyGame::HallBaseInfo stHallInfo;
    };
    inline bool operator==(const SCHallStateChange&l, const SCHallStateChange&r)
    {
        return l.stHallInfo == r.stHallInfo;
    }
    inline bool operator!=(const SCHallStateChange&l, const SCHallStateChange&r)
    {
        return !(l == r);
    }


}

#define SpyGame_Tag_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.strId,b.strId);jce_copy_struct(a.value,b.value);

#define SpyGame_Package_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.uuid,b.uuid);jce_copy_struct(a.iSeqNo,b.iSeqNo);jce_copy_struct(a.eCmd,b.eCmd);jce_copy_struct(a.cEncodeType,b.cEncodeType);jce_copy_struct(a.head,b.head);jce_copy_struct(a.body,b.body);jce_copy_struct(a.vTag,b.vTag);

#define SpyGame_UserBaseInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.uuid,b.uuid);jce_copy_struct(a.eType,b.eType);jce_copy_struct(a.strID,b.strID);jce_copy_struct(a.strCover,b.strCover);jce_copy_struct(a.strNick,b.strNick);

#define SpyGame_UserInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.stBaseInfo,b.stBaseInfo);jce_copy_struct(a.iTotalTimes,b.iTotalTimes);jce_copy_struct(a.iWinTimes,b.iWinTimes);jce_copy_struct(a.iLostTimes,b.iLostTimes);jce_copy_struct(a.iLevel,b.iLevel);jce_copy_struct(a.cGender,b.cGender);jce_copy_struct(a.strEmail,b.strEmail);jce_copy_struct(a.strDesc,b.strDesc);

#define SpyGame_UserSvrInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.stUserInfo,b.stUserInfo);jce_copy_struct(a.vKey,b.vKey);

#define SpyGame_CmdResult_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.iCmdId,b.iCmdId);jce_copy_struct(a.iErrCode,b.iErrCode);jce_copy_struct(a.strErrDesc,b.strErrDesc);jce_copy_struct(a.iSubErrCode,b.iSubErrCode);

#define SpyGame_Header_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.shVer,b.shVer);jce_copy_struct(a.lCurrTime,b.lCurrTime);jce_copy_struct(a.stUserInfo,b.stUserInfo);jce_copy_struct(a.stResult,b.stResult);jce_copy_struct(a.uAccIp,b.uAccIp);

#define SpyGame_RoomBaseInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.lRoomId,b.lRoomId);jce_copy_struct(a.strRoomName,b.strRoomName);jce_copy_struct(a.eUseState,b.eUseState);jce_copy_struct(a.nMaxMembers,b.nMaxMembers);jce_copy_struct(a.nCurMembers,b.nCurMembers);jce_copy_struct(a.lCreateUser,b.lCreateUser);

#define SpyGame_HallBaseInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.nRoomNum,b.nRoomNum);jce_copy_struct(a.nUserNum,b.nUserNum);jce_copy_struct(a.mapRoomInfo,b.mapRoomInfo);

#define SpyGame_UserGameInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.stUserInfo,b.stUserInfo);jce_copy_struct(a.eGameState,b.eGameState);jce_copy_struct(a.lRoomId,b.lRoomId);

#define SpyGame_RoomDetailInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.stBaseInfo,b.stBaseInfo);jce_copy_struct(a.eGameState,b.eGameState);jce_copy_struct(a.iStateUserCnt,b.iStateUserCnt);jce_copy_struct(a.mapUserInfo,b.mapUserInfo);

#define SpyGame_CSRegister_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.stUserInfo,b.stUserInfo);

#define SpyGame_SCRegisterRsp_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.iErrCode,b.iErrCode);jce_copy_struct(a.IsNewUser,b.IsNewUser);jce_copy_struct(a.stUserSvrInfo,b.stUserSvrInfo);

#define SpyGame_CSLogin_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.uuid,b.uuid);jce_copy_struct(a.strIosToken,b.strIosToken);

#define SpyGame_SCLoginRsp_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.iErrCode,b.iErrCode);

#define SpyGame_CSLogout_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.uuid,b.uuid);jce_copy_struct(a.strIosToken,b.strIosToken);

#define SpyGame_SCLogoutRsp_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.iErrCode,b.iErrCode);

#define SpyGame_CSGetHallInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.uuid,b.uuid);

#define SpyGame_SCGetHallInfoRsp_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.iErrCode,b.iErrCode);jce_copy_struct(a.stHallInfo,b.stHallInfo);

#define SpyGame_CSCreateRoom_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.lCreateUser,b.lCreateUser);jce_copy_struct(a.strRoomName,b.strRoomName);

#define SpyGame_SCCreateRoomRsp_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.iErrCode,b.iErrCode);jce_copy_struct(a.stRoomInfo,b.stRoomInfo);

#define SpyGame_CSEnterRoom_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.uuid,b.uuid);jce_copy_struct(a.lRoomId,b.lRoomId);

#define SpyGame_SCEnterRoomRsp_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.iErrCode,b.iErrCode);jce_copy_struct(a.stRoomInfo,b.stRoomInfo);

#define SpyGame_CSLeaveRoom_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.uuid,b.uuid);jce_copy_struct(a.lRoomId,b.lRoomId);

#define SpyGame_SCLeaveRoomRsp_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.iErrCode,b.iErrCode);

#define SpyGame_CSGetRoomInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.lRoomId,b.lRoomId);

#define SpyGame_SCGetRoomInfoRsp_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.iErrCode,b.iErrCode);jce_copy_struct(a.stRoomInfo,b.stRoomInfo);

#define SpyGame_CSUserPlayReady_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.lRoomId,b.lRoomId);jce_copy_struct(a.stUserInfo,b.stUserInfo);

#define SpyGame_SCUserPlayReadyRsp_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.iErrCode,b.iErrCode);

#define SpyGame_CSRoundVoice_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.uuid,b.uuid);jce_copy_struct(a.lRoomId,b.lRoomId);jce_copy_struct(a.vVoiceData,b.vVoiceData);

#define SpyGame_SCRoundVoiceRsp_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.iErrCode,b.iErrCode);

#define SpyGame_CSRoundVote_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.uuid,b.uuid);jce_copy_struct(a.lRoomId,b.lRoomId);jce_copy_struct(a.lVotedUser,b.lVotedUser);

#define SpyGame_SCRoundVoteRsp_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.iErrCode,b.iErrCode);

#define SpyGame_SCUserStateChange_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.stUserInfo,b.stUserInfo);

#define SpyGame_RoundWordInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.nRoundNum,b.nRoundNum);jce_copy_struct(a.lCurrentUser,b.lCurrentUser);jce_copy_struct(a.strGameWords,b.strGameWords);jce_copy_struct(a.lFirstUser,b.lFirstUser);

#define SpyGame_RoundVoiceInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.nRoundNum,b.nRoundNum);jce_copy_struct(a.lCurrentUser,b.lCurrentUser);jce_copy_struct(a.lPreviousUser,b.lPreviousUser);jce_copy_struct(a.vPreviousUserVoice,b.vPreviousUserVoice);

#define SpyGame_GameResultInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.iResult,b.iResult);jce_copy_struct(a.iSpyUser,b.iSpyUser);jce_copy_struct(a.strSpyWords,b.strSpyWords);jce_copy_struct(a.strOtherWords,b.strOtherWords);

#define SpyGame_RoundVoteInfo_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.iRestart,b.iRestart);jce_copy_struct(a.iVoteUser,b.iVoteUser);jce_copy_struct(a.mVoteResult,b.mVoteResult);jce_copy_struct(a.mVoteInfo,b.mVoteInfo);jce_copy_struct(a.stGameResult,b.stGameResult);jce_copy_struct(a.lFirstUser,b.lFirstUser);

#define SpyGame_SCRoomStateChange_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.stBaseInfo,b.stBaseInfo);jce_copy_struct(a.eGameState,b.eGameState);jce_copy_struct(a.stWordInfo,b.stWordInfo);jce_copy_struct(a.stVoiceInfo,b.stVoiceInfo);jce_copy_struct(a.stVoteInfo,b.stVoteInfo);

#define SpyGame_SCHallStateChange_JCE_COPY_STRUCT_HELPER   \
        jce_copy_struct(a.stHallInfo,b.stHallInfo);



#endif
